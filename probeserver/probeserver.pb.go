// Code generated by protoc-gen-go. DO NOT EDIT.
// source: probeserver.proto

package probeserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/google/cloudprober/probes/external/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProbeClient is the client API for Probe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProbeClient interface {
	Serve(ctx context.Context, in *proto1.ProbeRequest, opts ...grpc.CallOption) (*proto1.ProbeReply, error)
}

type probeClient struct {
	cc *grpc.ClientConn
}

func NewProbeClient(cc *grpc.ClientConn) ProbeClient {
	return &probeClient{cc}
}

func (c *probeClient) Serve(ctx context.Context, in *proto1.ProbeRequest, opts ...grpc.CallOption) (*proto1.ProbeReply, error) {
	out := new(proto1.ProbeReply)
	err := c.cc.Invoke(ctx, "/probeserver.Probe/Serve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeServer is the server API for Probe service.
type ProbeServer interface {
	Serve(context.Context, *proto1.ProbeRequest) (*proto1.ProbeReply, error)
}

func RegisterProbeServer(s *grpc.Server, srv ProbeServer) {
	s.RegisterService(&_Probe_serviceDesc, srv)
}

func _Probe_Serve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).Serve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/probeserver.Probe/Serve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).Serve(ctx, req.(*proto1.ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Probe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "probeserver.Probe",
	HandlerType: (*ProbeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Serve",
			Handler:    _Probe_Serve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "probeserver.proto",
}

func init() { proto.RegisterFile("probeserver.proto", fileDescriptor_probeserver_9868c40d754d743c) }

var fileDescriptor_probeserver_9868c40d754d743c = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x4f,
	0x4a, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x92, 0x72, 0x48, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf,
	0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0xce, 0xc9, 0x2f, 0x4d, 0x01, 0xab, 0x29, 0xd2, 0x87, 0x28,
	0xd5, 0x4f, 0xad, 0x28, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x07, 0x9b, 0xa0, 0x8f, 0x6c, 0x9c,
	0x91, 0x1b, 0x17, 0x6b, 0x00, 0x48, 0x95, 0x90, 0x2d, 0x17, 0x6b, 0x30, 0x48, 0x42, 0x48, 0x52,
	0x0f, 0xc9, 0x08, 0x3d, 0xb0, 0x64, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x38, 0x36,
	0xa9, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x71, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0xc9, 0x4c, 0x93, 0xb2, 0x00, 0x00, 0x00,
}
